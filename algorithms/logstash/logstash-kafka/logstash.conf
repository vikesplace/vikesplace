input {
    jdbc {
        jdbc_driver_library => "/usr/share/logstash/logstash-core/lib/jars/postgresql-42.7.3.jar"
        jdbc_driver_class => "org.postgresql.Driver"
        jdbc_connection_string => "jdbc:postgresql://postgresql:5432/${POSTGRES_DB}"
        jdbc_user => "${POSTGRES_USER}"
        jdbc_password => "${POSTGRES_PASSWORD}"
        jdbc_paging_enabled => true
        use_column_value => true
        tracking_column => "joining_date"
        tracking_column_type => "timestamp"
        schedule => "*/2 * * * *" # e.g. 2 minutes, see https://crontab.cronhub.io/
        statement => 'SELECT user_id, username, email, password, st_x(lat_long)::float as lat, st_y(lat_long)::float as lon, location, joining_date, items_sold, items_bought FROM public."Users" WHERE joining_date > :sql_last_value AND joining_date < CURRENT_TIMESTAMP ORDER BY joining_date ASC'
        type => "users"
        last_run_metadata_path => "/usr/share/logstash/pipeline/.KAFKA_logstash_jdbc_users"
    }

  jdbc{
        jdbc_driver_library => "/usr/share/logstash/logstash-core/lib/jars/postgresql-42.7.3.jar"
        jdbc_driver_class => "org.postgresql.Driver"
        jdbc_connection_string => "jdbc:postgresql://postgresql:5432/${POSTGRES_DB}"
        jdbc_user => "${POSTGRES_USER}"
        jdbc_password => "${POSTGRES_PASSWORD}"
        jdbc_paging_enabled => true
        use_column_value => true
        tracking_column => "listed_at"
        tracking_column_type => "timestamp"
        schedule => "*/3 * * * *"
        statement => 'SELECT listing_id, seller_id, buyer_username, title, price, st_x(lat_long)::float as lat, st_y(lat_long)::float as lon, location, status, listed_at, last_updated_at, category FROM public."Listings" WHERE listed_at > :sql_last_value AND listed_at < CURRENT_TIMESTAMP ORDER BY listed_at ASC'
        type => "listings"
        last_run_metadata_path => "/usr/share/logstash/pipeline/.KAFKA_logstash_jdbc_listings"
    }
}

filter{
    mutate {
        convert => {
            "lat" => "float"
            "lon" => "float"
        }
        rename => {
            "lat" => "[lat_long][lat]"
            "lon" => "[lat_long][lon]"
        }
    }
    if [type] == "users" {
        mutate{
            copy => {"user_id" => "[@metadata][_id]"}
            remove_field => ["@version", "@timestamp"]
        }
    }
    if [type] == "listings" {
        mutate{
            copy => {"listing_id" => "[@metadata][_id]"}
            remove_field => ["@version", "@timestamp"]
        }
    } 
}

output {
    if [type] == "users" {
        kafka {
            bootstrap_servers => "kafka:9092"
            topic_id => "users_topic"
            #id => "%{[@metadata][_id]}"
            codec => json {
            # Customize the output JSON format if needed
            #charset => "UTF-8"
            #pretty => true
            #skip_empty_fields => true
            #ignore_exceptions => true
            }
        }
    }
    if [type] == "listings" {
        kafka {
            bootstrap_servers => "kafka:9092"
            topic_id => "listings_topic"
            #id => "%{[@metadata][_id]}"
            codec => json {
            # Customize the output JSON format if needed
            #charset => "UTF-8"
            #pretty => true
            #skip_empty_fields => true
            #ignore_exceptions => true
            }
        }
    }
}

