input{
    jdbc{
        jdbc_driver_library => "/usr/share/logstash/logstash-core/lib/jars/postgresql-42.7.3.jar"
        jdbc_driver_class => "org.postgresql.Driver"
        jdbc_connection_string => "jdbc:postgresql://postgresql:5432/${POSTGRES_DB}"
        jdbc_user => "${POSTGRES_USER}"
        jdbc_password => "${POSTGRES_PASSWORD}"
        jdbc_paging_enabled => true
        use_column_value => true
        tracking_column => "joining_date"
        tracking_column_type => "timestamp"
        schedule => "*/2 * * * *" # e.g. 2 minutes, see https://crontab.cronhub.io/
        statement => "SELECT user_id, username, email, password, location[0]::float as lat, location[1]::float as lon, joining_date, items_sold, items_bought FROM public.users WHERE joining_date > :sql_last_value AND joining_date < CURRENT_TIMESTAMP ORDER BY joining_date ASC"
        type => "users"
        last_run_metadata_path => "/usr/share/logstash/pipeline/.logstash_jdbc_users"
    }
    jdbc{
        jdbc_driver_library => "/usr/share/logstash/logstash-core/lib/jars/postgresql-42.7.3.jar"
        jdbc_driver_class => "org.postgresql.Driver"
        jdbc_connection_string => "jdbc:postgresql://postgresql:5432/${POSTGRES_DB}"
        jdbc_user => "${POSTGRES_USER}"
        jdbc_password => "${POSTGRES_PASSWORD}"
        jdbc_paging_enabled => true
        use_column_value => true
        tracking_column => "listed_at"
        tracking_column_type => "timestamp"
        schedule => "*/3 * * * *"
        statement => "SELECT listing_id, seller_id, buyer_id, title, price, location[0]::float as lat, location[1]::float as lon, status, listed_at, last_updated_at, category FROM public.listings WHERE listed_at > :sql_last_value AND listed_at < CURRENT_TIMESTAMP ORDER BY listed_at ASC"
        type => "listings"
        last_run_metadata_path => "/usr/share/logstash/pipeline/.logstash_jdbc_listings"
    }
}
filter{
    if [lat] and [lon] {
        mutate {
            add_field => {
                "[location][lat]" => "%{[lat]}"
                "[location][lon]" => "%{[lon]}"
            }
            # convert => {
            #     "[location][lat]" => "float"
            #     "[location][lon]" => "float"
            # }
            remove_field => ["[lat]", "[lon]"]
            remove_field => ["@version","@timestamp"]
        }
    }
    if [type] == "users" {
        mutate{
            copy => {"user_id" => "[@metadata][_id]"}
            # remove_field => ["@version","@timestamp"]
        }
    }
    if [type] == "listings" {
        mutate{
            copy => {"listing_id" => "[@metadata][_id]"}
            # remove_field => ["@version","@timestamp"]
        }
    }
    
}
output{
    if [type] == "users" {
        elasticsearch{
            index => "users"
            document_id => "%{[@metadata][_id]}"
            hosts=> "${ELASTIC_HOSTS}"
            user=> "${ELASTIC_USER}"
            password=> "${ELASTIC_PASSWORD}"
            cacert=> "certs/ca/ca.crt"
        }
    }

    if [type] == "listings" {
        elasticsearch{
            index => "listings"
            document_id => "%{[@metadata][_id]}"
            hosts=> "${ELASTIC_HOSTS}"
            user=> "${ELASTIC_USER}"
            password=> "${ELASTIC_PASSWORD}"
            cacert=> "certs/ca/ca.crt"
        }
    }
}